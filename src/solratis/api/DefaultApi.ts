/**
 * Solartis Rate API for ILT
 * To get rate for Leisure Travel from Solartis Rate API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class DefaultApi {
    protected basePath = 'https://travelapihk.solartis.net/DroolsV4_2/DroolsService';
    public defaultHeaders: Array<string> = [];
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    private extendObj<T1, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * Gets Rate for Leisure Travel
     * @param Token Authentication Token
     * @param ContentType Content Type
     * @param EventName EventName
     * @param RatingRequest For rating request
     */
    public getRates(Token: string, ContentType: string, EventName: string, RatingRequest: models.RatingRequest): JQueryPromise<{ response: JQueryXHR; body: models.RatingSuccessResponse;  }> {
        let localVarPath = this.basePath + '/FireEventV2?';

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'Token' is not null or undefined
        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling getRates.');
        }

        // verify required parameter 'ContentType' is not null or undefined
        if (ContentType === null || ContentType === undefined) {
            throw new Error('Required parameter ContentType was null or undefined when calling getRates.');
        }

        // verify required parameter 'EventName' is not null or undefined
        if (EventName === null || EventName === undefined) {
            throw new Error('Required parameter EventName was null or undefined when calling getRates.');
        }

        // verify required parameter 'RatingRequest' is not null or undefined
        if (RatingRequest === null || RatingRequest === undefined) {
            throw new Error('Required parameter RatingRequest was null or undefined when calling getRates.');
        }


        //localVarPath = localVarPath + "?" + $.param(queryParameters);
        headerParams['Token'] = String(Token);

        headerParams['Content-Type'] = String(ContentType);

        headerParams['EventName'] = String(EventName);

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(RatingRequest);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: models.RatingSuccessResponse, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve(jqXHR, data),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject(xhr, errorThrown)
        );
        return dfd.promise();
    }

}
